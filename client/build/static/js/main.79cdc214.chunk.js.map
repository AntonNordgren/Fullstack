{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getDataFromDB","fetch","method","then","res","json","setState","listOfAlbums","catch","err","console","log","handleAdd","state","artist","album","albumCover","headers","Accept","Content-Type","body","JSON","stringify","handleDelete","id","handleEdit","handleArtist","e","target","value","handleAlbum","handleURL","_this2","react_default","a","createElement","className","onChange","type","placeholder","onClick","map","key","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79cdc214.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listOfAlbums: [],\r\n      artist: '',\r\n      album: '',\r\n      albumCover: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getDataFromDB();\r\n  }\r\n\r\n  getDataFromDB = () => {\r\n    fetch('/api/albums/', {\r\n      method: 'GET',\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ listOfAlbums: json }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleAdd = () => {\r\n    fetch('/api/albums?artist=' + this.state.artist + 'album=' + this.state.album + 'albumCover=' + this.state.albumCover, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        artist: this.state.artist,\r\n        album: this.state.album,\r\n        albumCover: this.state.albumCover\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => this.setState({ listOfAlbums: json }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleDelete = (id) => {\r\n    fetch('/api/albums/' + id, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => this.setState({listOfAlbums: json}))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleEdit = (id) => {\r\n    fetch('/api/albums/' + id, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        artist: this.state.artist,\r\n        album: this.state.album,\r\n        albumCover: this.state.albumCover\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(json => this.setState({listOfAlbums: json}))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleArtist = (e) => {\r\n    this.setState({\r\n      artist: e.target.value\r\n    })\r\n  }\r\n\r\n  handleAlbum = (e) => {\r\n    this.setState({\r\n      album: e.target.value\r\n    })\r\n  }\r\n\r\n  handleURL = (e) => {\r\n    this.setState({\r\n      albumCover: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"inputDiv\">\r\n          <input onChange={this.handleArtist} type=\"text\" placeholder=\"Enter artist\" />\r\n          <input onChange={this.handleAlbum} type=\"text\" placeholder=\"Enter album\" />\r\n          <input onChange={this.handleURL} type=\"text\" placeholder=\"Enter imgURL\" />\r\n          <button onClick={() => this.handleAdd()}>Add</button>\r\n        </div>\r\n        <div>\r\n          {\r\n            this.state.listOfAlbums.map((album) => {\r\n              return (\r\n                <div key={album.artist}>\r\n                  {album.artist}\r\n                  <button onClick={() => this.handleDelete(album._id)}>Delete</button>\r\n                  <button onClick={() => this.handleEdit(album._id)}>Edit</button>\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}